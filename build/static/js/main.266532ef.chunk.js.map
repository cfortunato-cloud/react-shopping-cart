{"version":3,"sources":["cartItem/cartItem.style.ts","cartItem/cartItem.tsx","cart/cart.style.ts","cart/cart.tsx","item/item.style.ts","item/item.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["Wrapper","styled","div","cartItem","item","addToCart","removeFromCart","title","className","price","amount","toFixed","Button","size","disableElevation","variant","onClick","id","src","image","alt","aside","Cart","items","cartItems","length","map","reduce","ack","Item","handleAddToCart","description","StyledButton","IconButton","getProducts","a","fetch","json","App","useState","cartOpen","setCartOpen","setCartItems","useQuery","data","isLoading","error","console","log","clickedItem","prev","find","LinearProgress","Drawer","anchor","open","onClose","Badge","badgeContent","color","Grid","container","spacing","xs","sm","client","QueryClient","ReactDOM","render","QueryClientProvider","document","getElementById"],"mappings":"iQAGaA,EAAUC,IAAOC,IAAV,6b,OC2CLC,EAhCmB,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,eAAnB,OAC9B,eAACN,EAAD,WACI,gCACI,6BAAKI,EAAKG,QACV,sBAAKC,UAAU,cAAf,UACI,yCAAYJ,EAAKK,SACjB,0CAAaL,EAAKM,OAASN,EAAKK,OAAOE,QAAQ,SAEnD,sBAAKH,UAAU,UAAf,UACI,cAACI,EAAA,EAAD,CACIC,KAAK,QACLC,kBAAgB,EAChBC,QAAQ,YACRC,QAAS,kBAAMV,EAAeF,EAAKa,KAJvC,eAQA,4BAAIb,EAAKM,SACT,cAACE,EAAA,EAAD,CACIC,KAAK,QACLC,kBAAgB,EAChBC,QAAQ,YACRC,QAAS,kBAAMX,EAAUD,IAJ7B,qBAUR,qBAAKc,IAAKd,EAAKe,MAAOC,IAAKhB,EAAKG,YCvC3BP,EAAUC,IAAOoB,MAAV,yHCgCLC,EAtBe,SAAC,GAA8C,IAEjDC,EAFKC,EAA2C,EAA3CA,UAAWnB,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,eAKnD,OACI,eAAC,EAAD,WACI,sCACsB,IAArBkB,EAAUC,OAAe,+CAAwB,KACjDD,EAAUE,KAAI,SAAAtB,GAAI,OACf,cAAC,EAAD,CAEIA,KAAMA,EACNC,UAAWA,EACXC,eAAgBA,GAHXF,EAAKa,OAMlB,2CAfgBM,EAeYC,EAdhCD,EAAMI,QAAO,SAACC,EAAaxB,GAAd,OAAuBwB,EAAMxB,EAAKM,OAASN,EAAKK,QAAO,IAczBE,QAAQ,UC5B9CX,EAAUC,IAAOC,IAAV,seCwBL2B,EAZgB,SAAC,GAAD,IAAEzB,EAAF,EAAEA,KAAM0B,EAAR,EAAQA,gBAAR,OAC3B,eAAC,EAAD,WACI,qBAAKZ,IAAKd,EAAKe,MAAOC,IAAKhB,EAAKG,QAChC,gCACI,6BAAKH,EAAKG,QACV,4BAAIH,EAAK2B,cACT,mCAAM3B,EAAKK,YAEf,cAACG,EAAA,EAAD,CAAQI,QAAS,kBAAMc,EAAgB1B,IAAvC,6B,8DCpBKJ,EAAUC,IAAOC,IAAV,8CAIP8B,EAAe/B,YAAOgC,IAAPhC,CAAH,uGCmBnBiC,EAAW,uCAAG,sBAAAC,EAAA,sEACLC,MAAM,qCADD,8BACuCC,OADvC,mFAAH,qDAwEFC,EApEF,WACX,MAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOf,EAAP,KAAkBkB,EAAlB,KACA,EAAmCC,YAAyB,WAAWT,GAA/DU,EAAR,EAAQA,KAAMC,EAAd,EAAcA,UAAWC,EAAzB,EAAyBA,MACzBC,QAAQC,IAAIJ,GAEZ,IAAuBrB,EAGjBO,EAAkB,SAACmB,GACvBP,GAAa,SAAAQ,GAIX,OAFqBA,EAAKC,MAAK,SAAA/C,GAAI,OAAIA,EAAKa,KAAOgC,EAAYhC,MAGtDiC,EAAKxB,KAAI,SAAAtB,GAAI,OAClBA,EAAKa,KAAOgC,EAAYhC,GAAxB,2BACMb,GADN,IACYM,OAAQN,EAAKM,OAAS,IAChCN,KAIA,GAAN,mBAAW8C,GAAX,4BAAqBD,GAArB,IAAkCvC,OAAQ,UAiB9C,OAAImC,EAAkB,cAACO,EAAA,EAAD,IAClBN,EAAc,0DAIhB,eAAC,EAAD,WACE,cAACO,EAAA,EAAD,CAAQC,OAAO,QAAQC,KAAMf,EAAUgB,QAAS,kBAAMf,GAAY,IAAlE,SACC,cAAC,EAAD,CACCjB,UAAWA,EACXnB,UAAWyB,EACXxB,eAvBuB,SAACW,GAC5ByB,GAAa,SAAAQ,GAAI,OACfA,EAAKvB,QAAO,SAACC,EAAKxB,GAChB,OAAIA,EAAKa,KAAOA,EACM,IAAhBb,EAAKM,OAAsBkB,EACzB,GAAN,mBAAWA,GAAX,4BAAqBxB,GAArB,IAA2BM,OAAQN,EAAKM,OAAQ,MAE1C,GAAN,mBAAWkB,GAAX,CAAgBxB,MAEjB,YAiBH,cAAC4B,EAAD,CAAchB,QAAS,kBAAMyB,GAAY,IAAzC,SACE,cAACgB,EAAA,EAAD,CAAOC,cA/CUnC,EA+CkBC,EA9CvCD,EAAMI,QAAO,SAACC,EAAaxB,GAAd,OAAuBwB,EAAMxB,EAAKM,SAAQ,IA8CJiD,MAAM,QAArD,SACE,cAAC,IAAD,QAGJ,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,gBACGlB,QADH,IACGA,OADH,EACGA,EAAMlB,KAAI,SAAAtB,GAAI,OACb,cAACwD,EAAA,EAAD,CAAMxD,MAAI,EAAe2D,GAAI,GAAIC,GAAI,EAArC,SACE,cAAC,EAAD,CAAM5D,KAAMA,EAAM0B,gBAAiBA,KADrB1B,EAAKa,a,iBCnFzBgD,EAAS,IAAIC,IAEnBC,IAASC,OACP,cAACC,EAAA,EAAD,CAAqBJ,OAAQA,EAA7B,SACE,cAAC,EAAD,MAEFK,SAASC,eAAe,W","file":"static/js/main.266532ef.chunk.js","sourcesContent":["import styled from 'styled-components';\n\n\nexport const Wrapper = styled.div`\n    display: flex;\n    justify-content: space-between;\n    font-family: Arial, Helvetica, sans-serif;\n    border-bottom: 1px solid lightblue;\n    padding-bottom: 20px;\n\n    div {\n        flex: 1;\n    }\n\n    .information, .buttons {\n        display: flex;\n        justify-content: space-between;\n    }\n\n    img {\n        max-width: 80px;\n        object-fit: cover;\n        margin-left: 40px;\n    }\n`;","import Button from '@material-ui/core/Button';\nimport React from 'react';\n//types \nimport { CartItemType } from '../App';\n//styles\nimport { Wrapper } from './cartItem.style';\nimport Item from '../item/item';\n\ntype Props = {\n    item: CartItemType;\n    addToCart: (clickedItem: CartItemType) => void;\n    removeFromCart: (id: number) => void;\n}\n\nconst cartItem: React.FC<Props> = ({item, addToCart, removeFromCart}) => (\n    <Wrapper>\n        <div>\n            <h3>{item.title}</h3>\n            <div className=\"infromation\">\n                <p>Price: ${item.price}</p>\n                <p>Total: ${(item.amount * item.price).toFixed(2)}</p>\n            </div>\n            <div className=\"buttons\">\n                <Button\n                    size=\"small\"\n                    disableElevation\n                    variant=\"contained\"\n                    onClick={() => removeFromCart(item.id)}\n                >\n                    -\n                </Button>\n                <p>{item.amount}</p>\n                <Button\n                    size=\"small\"\n                    disableElevation\n                    variant=\"contained\"\n                    onClick={() => addToCart(item)}\n                >\n                    +\n                </Button>\n            </div>\n        </div>\n        <img src={item.image} alt={item.title} />\n    </Wrapper>\n);\n\nexport default cartItem;","import styled from 'styled-components';\n\n\nexport const Wrapper = styled.aside`\n    font-family: Arial, Helvetica, sans-serif;\n    width: 500px;\n    padding-right: 20px;\n`;","import React from 'react';\nimport CartItem from '../cartItem/cartItem';\n//styles\nimport { Wrapper } from './cart.style';\n//types\nimport { CartItemType } from '../App';\n\ntype Props = {\n    cartItems: CartItemType[];\n    addToCart: (clickedItem: CartItemType) => void;\n    removeFromCart: (id: number) => void;\n}\n\nconst Cart: React.FC<Props> = ({ cartItems, addToCart, removeFromCart }) => {\n\n    const calculateTotal = (items: CartItemType[]) =>\n        items.reduce((ack: number, item) => ack + item.amount * item.price, 0)\n\n    return (\n        <Wrapper>\n            <h2>Cart</h2>\n            {cartItems.length === 0 ? <p>Cart is Empty.</p> : null }\n            {cartItems.map(item => (\n                <CartItem \n                    key={item.id}\n                    item={item}\n                    addToCart={addToCart}\n                    removeFromCart={removeFromCart}\n                />\n            ))}\n            <h2>Total: ${calculateTotal(cartItems).toFixed(2)}</h2>\n        </Wrapper>\n    )\n}\n\nexport default Cart;","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n    display: flex;\n    justify-content: space-between;\n    flex-direction: column;\n    width: 100%;\n    border: 1px solid lightblue;\n    border-radius: 20px;\n    height: 100%;\n\n    button {\n        border-radius: 0 0 20px 20px;\n    }\n\n    img {\n        max-height: 250px;\n        max-width: 300px;\n        object-fit: cover;\n        border-radius: 20px 20px 0 0;\n    }\n\n    div {\n        font-family: Arial, Helvetica, san-serif;\n    }\n`;","import Button from '@material-ui/core/Button';\n//types\nimport { CartItemType } from '../App';\n//styles\nimport { Wrapper } from './item.style';\nimport React from 'react';\n\n\n\ntype Props = {\n    item: CartItemType;\n    handleAddToCart: (clickedItem: CartItemType) => void;\n}\n\n const Item: React.FC<Props> = ({item, handleAddToCart}) => (\n    <Wrapper>\n        <img src={item.image} alt={item.title} />\n        <div>\n            <h3>{item.title}</h3>\n            <p>{item.description}</p>\n            <h3>${item.price}</h3>\n        </div>\n        <Button onClick={() => handleAddToCart(item)}>Add To Cart</Button> \n    </Wrapper>\n);\n\nexport default Item;","import styled from 'styled-components';\nimport IconButton from '@material-ui/core/IconButton'\nexport const Wrapper = styled.div`\n    margin 40px;\n`;\n\nexport const StyledButton = styled(IconButton)`\n    position: fixed;\n    z-index: 100;\n    right: 20px;\n    top: 20px;\n`;","import { useState } from 'react';\nimport { useQuery } from 'react-query';\n//components\nimport Cart from './cart/cart';\nimport Item from './item/item';\nimport Drawer from '@material-ui/core/Drawer';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Grid from '@material-ui/core/Grid';\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\nimport Badge from '@material-ui/core/Badge';\n//styles\nimport { Wrapper, StyledButton} from './App.styles';\nimport { CircularProgress } from '@material-ui/core';\nimport React from 'react';\n//types\nexport type CartItemType = {\n  id: number;\n  category: string;\n  description: string;\n  image: string;\n  price: number;\n  title: string;\n  amount: number;\n}\n\nconst getProducts = async (): Promise<CartItemType[]> =>\n  await (await fetch('https://fakestoreapi.com/products')).json();\n \n\nconst  App = () => {\n  const [cartOpen, setCartOpen] = useState(false);\n  const [cartItems, setCartItems] = useState([] as CartItemType[]);\n  const { data, isLoading, error } = useQuery<CartItemType[]>('products',getProducts);\n  console.log(data);\n\n  const getTotalItems = (items: CartItemType[]) => \n    items.reduce((ack: number, item) => ack + item.amount, 0);\n\n  const handleAddToCart = (clickedItem: CartItemType) => {\n    setCartItems(prev => {\n      //is the item already in the cart?\n      const isItemInCart = prev.find(item => item.id === clickedItem.id)\n\n      if (isItemInCart) {\n        return prev.map(item => \n          item.id === clickedItem.id\n          ? {...item, amount: item.amount + 1}\n          : item\n        );\n      }\n      //first time item is added to cart\n      return [...prev, {...clickedItem, amount: 1}];\n    })\n  };\n\n  const handleRemoveFromCart = (id: number ) => {\n    setCartItems(prev => (\n      prev.reduce((ack, item) => {\n        if (item.id === id) {\n          if (item.amount === 1 ) return ack;\n          return [...ack, { ...item, amount: item.amount -1}];\n        } else {\n          return [...ack, item];\n        }\n      }, [] as CartItemType[])\n    ))\n  };\n\n  if (isLoading) return <LinearProgress />;\n  if (error) return <div>Something went wrong...</div>;\n\n\n  return (\n    <Wrapper>\n      <Drawer anchor='right' open={cartOpen} onClose={() => setCartOpen(false)}> \n       <Cart \n        cartItems={cartItems}\n        addToCart={handleAddToCart}\n        removeFromCart={handleRemoveFromCart}\n        />\n      </Drawer>\n      <StyledButton onClick={() => setCartOpen(true)}>\n        <Badge badgeContent={getTotalItems(cartItems)} color='error'>\n          <AddShoppingCartIcon />\n        </Badge>\n      </StyledButton>\n      <Grid container spacing={3}>\n        {data?.map(item => (\n          <Grid item key={item.id} xs={12} sm={4}> \n            <Item item={item} handleAddToCart={handleAddToCart} />\n          </Grid>\n        ))}\n      </Grid>\n    </Wrapper>\n  ); \n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { QueryClient, QueryClientProvider } from 'react-query';\n\nconst client = new QueryClient();\n\nReactDOM.render(\n  <QueryClientProvider client={client}>\n    <App />\n  </QueryClientProvider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}